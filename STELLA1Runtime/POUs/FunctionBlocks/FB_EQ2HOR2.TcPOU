<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_EQ2HOR2" Id="{7b34f02a-1435-4300-8153-5c49f62d1b5b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EQ2HOR2
VAR_INPUT
	// right ascension in degrees
	alpha: LREAL;
	// declination in degrees
	delta: LREAL;
	// longitude in degrees
	lon: LREAL;
	// latitude in degrees
	lat: LREAL;
	// Julian Days
	JD: LREAL;
END_VAR
VAR_OUTPUT
	// altitude in degrees
	alt: LREAL;
	// azimuth in degrees
	az: LREAL;
	// hour angle in degreesss
	ha: LREAL;
END_VAR
VAR
	lst: LREAL;
	// helper variables
	sinalt,
	// in radians
	phi_r, tau_r, alpha_r, delta_r: LREAL;
	// current epoch
	J_now: 		LREAL;
	// enable precession
	precess: 	BOOL := TRUE;
	// enable nutation
	nutate:		BOOL := TRUE;
	// enable abberation
	abberation:	BOOL := TRUE;
	// enable refraction correction
	refract:	BOOL := TRUE;
	// precession function block
	fbprecess: 	FB_PRECESS3;
	// nutation function block
	co_nutate: CO_NUTATE;
	// abberration function block
	fbaberration: CO_ABERRATION;
	//precessed coordinates
	alpha1, delta1, 
	d_alpha2, d_delta2, 
	d_alpha3, d_delta3:	LREAL;
END_VAR
VAR CONSTANT
	d2r:	LREAL := PI/180.0;
	r2d:	LREAL := 180.0/PI;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
source: http://star-www.st-and.ac.uk/~fv/webnotes/chapter7.htm
https://squarewidget.com/astronomical-calculations-sidereal-time/

*)
lst := ct2lst(lon, jd) * 15.0; // lst in degrees

J_now := (JD - 2451545.0)/365.25 + 2000.0; // compute current equinox
IF precess THEN
	fbprecess( ra := alpha, dec := delta, 
	//EQUINOX1 := 2000.0, EQUINOX2 := J_now, 
	ra_precessed =>alpha1, dec_precessed => delta1);
ELSE
	alpha1 := alpha;
	delta1 := delta;	
END_IF

IF nutate THEN
	co_nutate(	jd := jd, 
				ra := alpha, 
				dec := delta, 
				d_ra => d_alpha2, 
				d_dec => d_delta2);
	alpha1 := alpha1 + d_alpha2;
	delta1 := delta1 + d_delta2;
ELSE
	d_alpha2 := 0.0;
	d_delta2 := 0.0;
END_IF

IF abberation THEN
	fbaberration(	jd := jd, 
					ra := alpha, 
					dec := delta, 
					d_ra => d_alpha3, 
					d_dec => d_delta3);
	alpha1 := alpha1 + d_alpha3;
	delta1 := delta1 + d_delta3;
ELSE
	d_alpha3 := 0.0;
	d_delta3 := 0.0;
END_IF

ha := MODABS(lst - alpha1, 360.0);

alpha_r := alpha1 * d2r;
delta_r := delta1 * d2r;
tau_r := lst*d2r - alpha_r;
phi_r := lat*d2r;

sinalt := SIN(phi_r)*SIN(delta_r) + COS(phi_r)*COS(delta_r)*COS(tau_r);
alt := ASIN(sinalt) * r2d;
IF refract THEN
	alt := alt + Refraction(alt, pressure := 770.0, temperature := 10.0);
END_IF
az := ATAN2(SIN(tau_r), SIN(phi_r)*COS(tau_r) - COS(phi_r)*TAN(delta_r)) * r2d + 180.0;
]]></ST>
    </Implementation>
    <LineIds Name="FB_EQ2HOR2">
      <LineId Id="391" Count="55" />
      <LineId Id="153" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>