<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FilterWheelControl" Id="{f0e4f375-0934-4386-a9fa-94537c34c7e1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM FilterWheelControl
VAR_INPUT
	// enable the axis
	Enable:				BOOL;
	// reset the axis(-error)
	Reset:				BOOL;
	// move counter-clockwise
	left:				BOOL;
	// move clockwise
	right:				BOOL;
	// TRUE, if the filter is in position and wheel has come to rest
	Ready:				BOOL;
	// filter position
	filter_position: 	USINT;
	// move to given position
	MoveAxis: 			BOOL;
	// calibrate the axis
	HomeAxis:			BOOL;
END_VAR
VAR_OUTPUT
	// is true if an error occurred
	error: 				BOOL;
	// number of current axis error
	ErrorID:			UDINT;
	act_position:		LREAL;
	// axis has been calibrated
	Calibrated :		BOOL;
END_VAR
VAR
	FilterWheelAxis:	FB_Axis2;
	// axis position to set to with `MoveAxis`
	position:			LREAL;
	// current filter determined from the axis position
	actual_filter:		USINT;
	FilterWheelEvent:	FB_EventLog;
	CalibratedEvent:	FB_EventLog;
	FilterReadyEvent:	FB_Eventlog;
	Calibration1Event:	FB_Eventlog;
	Calibration2Event:	FB_Eventlog;
	
	// last known filter position
	last_filter_position:	USINT;
	HomingMode:			MC_HomingMode := MC_HomingMode.MC_ForceCalibration;
	MQTTTimer : 		TON := (PT:=T#5S);
	CalibrationTrigger1:	R_TRIG;
	CalibrationTrigger2:	F_TRIG;
END_VAR
VAR CONSTANT
	// total number of filters in the filter wheel
	filters:			USINT := 24;
	// current position of the calibration cam. Apply an offset here if necessary
	calibration_position:	LREAL := 1.8;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This program controls the filter wheel. 
The current optical filter is selected through `filter_position`.
The number of filters is hard coded to 24.

*)

// limit desired filter_position to [0...filters-1]
filter_position := filter_position MOD filters;
// calculate the actual filter position
actual_filter := LREAL_TO_USINT((360.0 - act_position) * filters / 360.0) MOD filters;

Ready := (filter_position = actual_filter) AND (FilterWheelAxis.Standstill OR NOT Enable);
IF Pendantcontrol.telescope_mode = E_TelescopeMode.automatic THEN
	IF FilterWheelAxis.Calibrated THEN
		// if we are on automatic mode then position the filterwheel
		position := MODABS(360.0 - 360.0 * WORD_TO_LREAL(filter_position) / WORD_TO_LREAL(filters), 360.0);
		IF filter_position <> actual_filter THEN
			IF FilterWheelAxis.Ready THEN
				MoveAxis := TRUE;	
			ELSE
				Enable := TRUE;
			END_IF
		END_IF
		IF FilterWheelAxis.MoveDone THEN
			Enable := FALSE;
		END_IF
	ELSE
		IF FilterWheelAxis.Ready THEN
			HomeAxis := TRUE;
		END_IF
	END_IF
END_IF
IF HomeAxis THEN
	IF HomingMode = MC_HomingMode.MC_DefaultHoming THEN
		position := calibration_position;
		filter_position := 0;	
	END_IF
END_IF

Calibrated := FilterWheelAxis.Calibrated;

FilterWheelAxis(
	Enable := 			Enable,
	Reset := 			Reset,
	MoveAxis :=			MoveAxis,
	HomeAxis :=			HomeAxis,
	HomingMode :=		HomingMode,
	Position := 		position, 
	Velocity :=			30.0, //60.0,
	Enable_Positive :=  TRUE,
	Enable_Negative := 	TRUE,
	Jog_Forward :=		left,
	Jog_Backwards := 	right,
	bCalibrationCam :=	NOT GVL_FilterWheel.bCalibrationCam,
	isModuloAxis :=		TRUE,
	ActualPosition => 	act_position,
	Error => 			error,
	ErrorID => 			ErrorID,
	AxisRef :=			GVL_FilterWheel.FilterWheel_AxisRef);

IF FilterWheelAxis.MoveDone THEN
	MoveAxis := FALSE;
END_IF

IF FilterWheelAxis.HomeDone THEN
	HomeAxis := FALSE;
	Enable := FALSE;
END_IF
	
IF FilterWheelAxis.ResetDone THEN
	reset := FALSE;
END_IF

CalibrationTrigger1(CLK := GVL_FilterWheel.bCalibrationCam);
CalibrationTrigger2(CLK := GVL_FilterWheel.bCalibrationCam);


MQTTTimer(IN:=TRUE);
IF actual_filter <> last_filter_position OR MQTTTimer.Q THEN
	MAIN.MQTTClient.Publish('telescope', 'dome', 'FilterPosition', WORD_TO_STRING(actual_filter));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'FilterWheelReady', BOOL_TO_STRING(Ready));
	last_filter_position := actual_filter;
	MQTTTimer(IN:=FALSE);
END_IF

FilterWheelEvent(	
	Trigger := 		Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Filter Wheel Axis Error: %s',
	OnMessage := 	NCError_TO_STRING(ErrorID),
	OffMEssage := 	'OK',
	OffLevel := 	ADSLOG_MSGTYPE_HINT);
	
CalibratedEvent(
	Trigger :=		Calibrated,
	Level := 		ADSLOG_MSGTYPE_HINT,
	FormatString :=	'%s',
	OnMessage := 	'Filter wheel is calibrated.');
	
FilterReadyEvent(
	Trigger :=		(filter_position = actual_filter) AND Calibrated,
	Level := 		ADSLOG_MSGTYPE_HINT,
	FormatString :=	'Filter position %s is ready.',
	OnMessage := 	WORD_TO_STRING(actual_filter));
	
Calibration1Event(
	Trigger :=	CalibrationTrigger1.Q,
	Level := 		ADSLOG_MSGTYPE_HINT,
	FormatString :=	'Calibration raising signal triggered at position: %s',
	OnMessage := 	LREAL_TO_STRING(act_position));

Calibration2Event(
	Trigger :=	CalibrationTrigger2.Q,
	Level := 		ADSLOG_MSGTYPE_HINT,
	FormatString :=	'Calibration falling signal triggered at position: %s',
	OnMessage := 	LREAL_TO_STRING(act_position));
	]]></ST>
    </Implementation>
    <LineIds Name="FilterWheelControl">
      <LineId Id="184" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="235" Count="1" />
      <LineId Id="390" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="252" Count="1" />
      <LineId Id="596" Count="0" />
      <LineId Id="607" Count="1" />
      <LineId Id="597" Count="1" />
      <LineId Id="592" Count="1" />
      <LineId Id="604" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="443" Count="1" />
      <LineId Id="379" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="758" Count="0" />
      <LineId Id="761" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="96" Count="1" />
      <LineId Id="53" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="137" Count="2" />
      <LineId Id="811" Count="1" />
      <LineId Id="814" Count="0" />
      <LineId Id="813" Count="0" />
      <LineId Id="654" Count="1" />
      <LineId Id="489" Count="1" />
      <LineId Id="494" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="123" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="381" Count="2" />
      <LineId Id="385" Count="2" />
      <LineId Id="393" Count="0" />
      <LineId Id="395" Count="4" />
      <LineId Id="819" Count="2" />
      <LineId Id="823" Count="1" />
      <LineId Id="822" Count="0" />
      <LineId Id="826" Count="5" />
      <LineId Id="825" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>