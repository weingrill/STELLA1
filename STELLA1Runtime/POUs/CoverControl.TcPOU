<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="CoverControl" Id="{c323d474-9f57-40fd-ba67-b4ebd08c9f7c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CoverControl
VAR_INPUT
	// resets all drives after an error has occured
	reset:		BOOL;
	// open the cover in proper order
	open:		BOOL;
	// close the cover in proper order
	close:		BOOL;
	// actual active cover in manual mode, 0 for automatic = all covers active
	active_cover:	INT;

END_VAR
VAR_OUTPUT
	// is TRUE, if all covers are open
	isopen:			BOOL;
	// is TRUE, if all covers are closed
	isclosed:		BOOL;
	// is TRUE if any cover-driver reports an error
	Error: 	BOOL;
	// warning state of the DC drives
	Warning: BOOL;
	// cover1 is open
	Cover1_opened, 
	// cover1 is closed
	Cover1_closed:	BOOL;
	// cover2 is open
	Cover2_opened, 
	// cover2 is closed
	Cover2_closed:	BOOL;
	// cover3 is open
	Cover3_opened, 
	// cover3 is closed
	Cover3_closed:	BOOL;
	Cover1_error: BOOL;
	Cover2_error: BOOL;
	Cover3_error: BOOL;
END_VAR
VAR
	// delay timer for opening cover2
	open2_delay: 	TON := (PT:=T#1S);;
	// dely timer for closing cover3
	close3_delay : 	TON := (PT:=T#3S);;
	// trigger for error
	error_trigger:	SR;
	//error event for cover1
	Cover1_Event,
	Cover2_Event,
	Cover3_Event:	FB_EventLog;
	// timeout event for cover1
	Cover1_Timeout_Event,
	Cover2_Timeout_Event,
	Cover3_Timeout_Event:	FB_EventLog;
	// log if covers are open
	Covers_opened_event,
	// log if covers are closed
	Covers_closed_event:	FB_EventLog;
	// Event log for a generic drive error
	Covers_Error_event:		FB_EventLog;
	// Event log for a generic drive warning
	Covers_Warning_event:		FB_EventLog;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This is the control for the two (three) telescope covers. 
The correct order for opening is 1->3->2 and for closing 2->3->1.
GVL Open and close signals are inverted
*)

// close has precedence over open
IF close THEN
	open := FALSE;
END_IF

Cover1_opened := NOT GVL_Telescope.cover1_open;
Cover2_opened := NOT GVL_Telescope.cover2_open;
Cover3_opened := NOT GVL_Telescope.cover3_open;
Cover1_closed := NOT GVL_Telescope.cover1_closed;
Cover2_closed := NOT GVL_Telescope.cover2_closed;
Cover3_closed := NOT GVL_Telescope.cover3_closed;
Cover1_error := Cover1_opened AND Cover1_closed;
Cover2_error := Cover2_opened AND Cover2_closed;
Cover3_error := Cover3_opened AND Cover3_closed;

// wait for cover2 until cover3 has left the closed state
open2_delay(IN := open AND NOT cover3_closed);
// wait for cover3 until cover2 has left the open state
close3_delay(IN := close AND NOT cover2_opened);

IF close THEN
	GVL_Telescope.close_cover1 := GVL_Telescope.cover1_closed AND NOT GVL_Telescope.cover3_closed;
	GVL_Telescope.close_cover2 := GVL_Telescope.cover2_closed;
	GVL_Telescope.close_cover3 := GVL_Telescope.cover3_closed AND close3_delay.Q;
ELSIF open THEN
	GVL_Telescope.open_cover1 := GVL_Telescope.cover1_open;
	GVL_Telescope.open_cover2 := GVL_Telescope.cover2_open AND open2_delay.Q;
	GVL_Telescope.open_cover3 := GVL_Telescope.cover3_open;			
END_IF


// we are open, if all covers are open
isopen := cover3_opened AND cover2_opened AND cover1_opened;
// we are closed, if all covers are closed
isclosed := cover2_closed AND cover3_closed AND cover1_closed;
// error indicates an axis error on any axis
error_trigger(SET1 := Cover1_error OR Cover2_error OR Cover3_error,
				RESET := reset,
				Q1 => error);
//Warning := Cover1_control.Warning OR Cover2_control.Warning OR Cover3_control.Warning;

IF isclosed THEN
	close := FALSE;
END_IF

IF isopen THEN
	open := FALSE;
END_IF

Covers_Error_Event.OnMessage := 'Cover drive error';
IF Error THEN
	IF Cover3_error THEN 
		Covers_Error_Event.OnMessage := 'Cover 3 has a drive error.';
	END_IF
	IF Cover2_error THEN 
		Covers_Error_Event.OnMessage := 'Cover 2 has a drive error.';
	END_IF
	IF Cover1_error  AND NOT GVL_Main.isRoboTel THEN 
		Covers_Error_Event.OnMessage := 'Cover 1 has a drive error.';
	END_IF
END_IF

Covers_Error_event(	Trigger := Error, 
					Level := ADSLOG_MSGTYPE_ERROR);

Covers_Warning_event(	Trigger := Warning, 
						Level := ADSLOG_MSGTYPE_WARN);

// raise an error, if both opened and closed signals are activated
// handle RoboTel differently
Cover1_Event(	Trigger := cover1_opened AND cover1_closed AND NOT GVL_Main.isRoboTel,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover1: limit switch error');

Cover2_Event(Trigger := cover2_opened AND cover2_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: limit switch error');

Cover3_Event(Trigger := cover3_opened AND cover3_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: limit switch error');

//trigger an event, if we encounter a timeout
// handle RoboTel differently

Cover1_Timeout_Event(Trigger := FALSE,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover1: Timeout');

Cover2_Timeout_Event(Trigger := FALSE,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: Timeout');

Cover3_Timeout_Event(Trigger := FALSE,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: Timeout');
// Log if we are opened
Covers_opened_event(Trigger := isopen,
					Level := ADSLOG_MSGTYPE_WARN,
					OnMessage := 'All covers are open');
//log if we are closed
Covers_closed_event(Trigger := isclosed,
					Level := ADSLOG_MSGTYPE_HINT,
					OnMessage := 'All covers are closed');
				]]></ST>
    </Implementation>
    <LineIds Name="CoverControl">
      <LineId Id="146" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="269" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="270" Count="0" />
      <LineId Id="274" Count="2" />
      <LineId Id="1097" Count="1" />
      <LineId Id="1096" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1092" Count="0" />
      <LineId Id="1094" Count="1" />
      <LineId Id="931" Count="0" />
      <LineId Id="1085" Count="0" />
      <LineId Id="1087" Count="1" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1090" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="1232" Count="1" />
      <LineId Id="628" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="1162" Count="5" />
      <LineId Id="623" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="635" Count="5" />
      <LineId Id="630" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="644" Count="1" />
      <LineId Id="648" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="382" Count="1" />
      <LineId Id="345" Count="1" />
      <LineId Id="384" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="386" Count="1" />
      <LineId Id="367" Count="1" />
      <LineId Id="388" Count="1" />
      <LineId Id="370" Count="1" />
      <LineId Id="390" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="431" Count="3" />
      <LineId Id="430" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>