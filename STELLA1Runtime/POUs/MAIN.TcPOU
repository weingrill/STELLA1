<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{0fe844df-7078-44d3-bc48-268e6c994874}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// telescope drives are ready to enable
	ready:				BOOL;
	// error stat on drive, power or hydraulics
	error:				BOOL;
	// manual, panel or remote reset
	reset:				BOOL;
	// start hydraulics
	start:				BOOL;
	// stop hydraulics 
	stop:				BOOL;
	// soft start trafo
	key_switch:			BOOL;
	//	open brake
	brake_clearing:		BOOL := FALSE;
	
	remote_start:		BOOL;
	remote_stop: 		BOOL;
	remote_reset:		BOOL;
	remote_keyswitch:	BOOL;
	remote_brake_clearing:	BOOL;
	// blink error lamp on warning
	error_lamp: 		FB_BLINK;
	power_lamp:			FB_BLINK;
	sound_horn:			FB_Horn;
	// main cabinet temperature in degrees
	cabinet_temperature:	REAL;
	// measures time between soft start command and power available
	ups_output_voltage:		REAL;
	ups_output_current:		REAL;
	ups_output_power:		REAL;
	PhaseLog:				FB_EventLog;
	TemperatureEvent,
	TemperatureCriticalEvent:	FB_EventLog;
	MQTTTimer : 		TON := (PT:=T#5S);
	GetHostName:		FB_GetHostName;
	HostName: 			STRING(255);
//	LightSwitch:		FB_ButtonEnable;
//	Lightbutton: 		BOOL;
	bExecute:			BOOL := TRUE;
	cabinet_temperature_warning:	SR;
	cabinet_temperature_critical:	SR;
	MQTTClient:		FB_MQTTCommunication;
	ups: 				PS_Q4_DcUpsEC_Cyclic_2;
	xActivate:			BOOL := TRUE;
	arrInputPD	AT%I*:	ARRAY[0..30] OF WORD;
	//UPS_Error,
	UPS_Alarm,
	UPS_Warning,
	UPS_BatMode,
	UPS_ReplaceBattery,
	MainsWarning,
	MainsError:	FB_EventLog;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control loop
* Execute sub modules
* power management
* control panel switches and status lamps

* start switch activates Hydraulics and Trafo
* 
*)
GetHostName(bExecute := bExecute, sHostName => HostName);
bExecute := FALSE;
start := GVL_Main.start_switch OR remote_start;
stop := (NOT GVL_Main.stop_switch) OR remote_stop;
key_switch := GVL_Main.key_switch_remote OR remote_keyswitch;
brake_clearing := GVL_Main.brake_clearing OR remote_brake_clearing;
reset := GVL_Main.reset_switch OR GVL_pendant_control.reset_switch OR remote_reset;		
brake_clearing := NOT GVL_Main.brake_clearing;
cabinet_temperature := INT_TO_REAL(GVL_Main.main_cabinet_temperature) / 10.0;
cabinet_temperature_warning(SET1 := cabinet_temperature > 50.0,
							RESET := cabinet_temperature < 40.0);
cabinet_temperature_critical(SET1 := cabinet_temperature > 60.0,
							RESET := cabinet_temperature < 50.0);
IF key_switch THEN
	Transformer.start();
ELSE
	Transformer.stop();
END_IF

IF reset THEN
	Transformer.reset();
END_IF

IF start THEN
	HydraulicsControl.enable := TRUE;
END_IF
IF stop THEN
	HydraulicsControl.enable := FALSE;
END_IF

// telescope is ready when power available
ready :=  GVL_main.trafo_bypassed;

// QUINT UPS control section
ups(
	xActivate:= xActivate, 
	arrInputPD:= arrInputPD, 
	xActive=> , 
	xError=> , 
	wDiagCode=> , 
	wAddDiagCode=> , 
	wOutputVoltage=> ups_output_voltage, 
	wOutputCurrent=> ups_output_current, 
	xBatModeActive=> , 
	udtDataStruct=> , 
	xAlarm=> , 
	xWarning=> , 
	xReplaceBattery=> , 
	udtDiag=> );
	
ups_output_voltage := ups_output_voltage / 1000.0;
ups_output_current := ups_output_current / 1000.0;
ups_output_power := ups_output_voltage * ups_output_current;

PowerMonitoring();		
TelescopeControl();	//
CoverControl();	//
PendantControl();	//
NasmythControl();	//
HydraulicsControl();	//
ElevationControl();	//
AzimuthElevationControl();	//
DerotatorControl();	//
FilterWheelControl();	//
FocusControl();
MQTTClient();
Transformer();

error := GVL_Telescope.azimut_limit_switch
			OR FilterWheelControl.Error
			OR Focuscontrol.Error
			OR NasmythControl.error
			OR CoverControl.Error
			OR HydraulicsControl.error;
// set control lights					
GVL_Main.lamp_on_manual := PendantControl.manual;

IF GVL_Safety.Error THEN
	error_lamp.blink := e_blink.short;
ELSIF ElevationControl.error OR AzimuthElevationControl.error OR DerotatorControl.Error THEN
	error_lamp.blink := e_blink.long;
ELSIF HydraulicsControl.oil_warning OR HydraulicsControl.oil_hot OR HydraulicsControl.pressure_failure THEN
	error_lamp.blink := e_blink.slow;
ELSIF Transformer.error THEN
	error_lamp.blink := e_blink.fast;
ELSIF error THEN
	error_lamp.blink := e_blink.on;
ELSE
	error_lamp.blink := e_blink.off; 
END_IF

IF Transformer.restart_inhibited THEN
	power_lamp.blink := e_blink.short;
ELSIF GVL_main.trafo_bypassed THEN 
	power_lamp.blink := e_blink.on;
ELSIF Transformer.phase_available THEN
	power_lamp.blink := e_blink.long;
ELSIF NOT Transformer.phase_available THEN
	power_lamp.blink := e_blink.off;
ELSIF  Transformer.error THEN
	power_lamp.blink := e_blink.fast;
ELSE 
	power_lamp.blink := e_blink.off; 
END_IF
error_lamp(Q => GVL_Main.lamp_error);
//GVL_Main.lamp_error := error_lamp.Q;
power_lamp(Q => GVL_Main.lamp_power);
//GVL_Main.lamp_power := power_lamp.Q;

IF GVL_Telescope.azimut_limit_switch THEN
	sound_horn.horn := E_horn.long;
ELSIF Hydraulicscontrol.suction_failure THEN
	sound_horn.horn := E_horn.long;
ELSIF TelescopeControl.poweronwarning.Q THEN
	sound_horn.horn := E_horn.short;
ELSIF Pendantcontrol.horn THEN
	sound_horn.horn := E_horn.beep;
ELSE
	sound_horn.horn := E_horn.off;
END_IF 

sound_horn(Q => GVL_Telescope.horn );

SafetyHandling();

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	MQTTClient.Publish('electronics', 'base', 'MainCabinetTemperature', LREAL_TO_FMTSTR(cabinet_temperature, 2, TRUE));
	MQTTClient.Publish('electronics', 'base', 'PowerOK', BOOL_TO_STRING(Transformer.power_ok));
	MQTTClient.Publish('electronics', 'base', 'PhaseOK', BOOL_TO_STRING(Transformer.phase_available));
	MQTTClient.Publish('electronics', 'base', 'MainReady', BOOL_TO_STRING(ready));
	MQTTClient.Publish('electronics', 'base', 'MasterError', BOOL_TO_STRING(error));
	MQTTClient.Publish('electronics', 'base', 'UPSOutputVoltage', LREAL_TO_FMTSTR(ups_output_voltage, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSOutputCurrent', LREAL_TO_FMTSTR(ups_output_current, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSOutputPower', LREAL_TO_FMTSTR(ups_output_power, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UpsError', BOOL_TO_STRING(ups.xError));
	MQTTClient.Publish('electronics', 'base', 'UpsAlarm', BOOL_TO_STRING(ups.xAlarm));
	MQTTClient.Publish('electronics', 'base', 'UpsWarning', BOOL_TO_STRING(ups.xWarning));
	MQTTClient.Publish('electronics', 'base', 'UpsBatteryMode', BOOL_TO_STRING(ups.xBatModeActive));
	MQTTClient.Publish('electronics', 'base', 'UPSReplaceBattery', BOOL_TO_STRING(ups.xReplaceBattery));
END_IF

PhaseLog(	
	Trigger := 		NOT Transformer.phase_available, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'%s',
	OnMessage := 	'electrical phases:	ERROR!',
	OffLevel := 	ADSLOG_MSGTYPE_HINT,
	OffMEssage := 	'electrical phases:	active');
	
TemperatureEvent(	
	Trigger := 		cabinet_temperature_warning.Q1, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	FormatString :=	'Main cabinet temperature warning:	%s',
	OnMessage := 	LREAL_TO_FMTSTR( cabinet_temperature, 1, TRUE),);
TemperatureCriticalEvent(	
	Trigger := 		cabinet_temperature_critical.Q1, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Main cabinet temperature is critical:	%s!',
	OnMessage := 	LREAL_TO_FMTSTR( cabinet_temperature, 1, TRUE),);
(*	
UPS_Error(	
	Trigger := 		ups.xError, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	OnMessage := 	'UPS has an error!');
*)
UPS_Alarm(	
	Trigger := 		ups.xAlarm, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	OnMessage := 	'UPS has an alarm!');

	
UPS_Warning(	
	Trigger := 		ups.xWarning, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	OnMessage := 	'UPS has a warning!');

UPS_BatMode(	
	Trigger := 		ups.xBatModeActive, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	OnMessage := 	'UPS is on battery!');

UPS_ReplaceBattery(	
	Trigger := 		ups.xReplaceBattery, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	OnMessage := 	'Replace UPS battery!');
(* 	NeutralCurrentGuardWarning		AT%I*:	BOOL;
	NeutralCurrentGuarError			AT%I*:	BOOL;
	ActivePowerGuardWarning			AT%I*:	BOOL;
	ActivePowerGuardError			AT%I*:	BOOL;
	ApparentPowerGuardWarning		AT%I*:	BOOL;
	ApparentPowerGuardError			AT%I*:	BOOL;
	ActivePower						AT%I*:	REAL;
	ActiveEnergy					AT%I*:	LINT;
	NeutralLineCurrent				AT%I*:	REAL; *)

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="655" Count="33" />
      <LineId Id="690" Count="2" />
      <LineId Id="694" Count="1" />
      <LineId Id="888" Count="1" />
      <LineId Id="1023" Count="0" />
      <LineId Id="994" Count="0" />
      <LineId Id="1008" Count="13" />
      <LineId Id="1002" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1069" Count="1" />
      <LineId Id="1250" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="702" Count="6" />
      <LineId Id="943" Count="0" />
      <LineId Id="711" Count="1" />
      <LineId Id="718" Count="1" />
      <LineId Id="722" Count="2" />
      <LineId Id="1194" Count="0" />
      <LineId Id="728" Count="1" />
      <LineId Id="832" Count="0" />
      <LineId Id="829" Count="1" />
      <LineId Id="842" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="833" Count="0" />
      <LineId Id="835" Count="2" />
      <LineId Id="840" Count="1" />
      <LineId Id="838" Count="1" />
      <LineId Id="831" Count="0" />
      <LineId Id="884" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="885" Count="2" />
      <LineId Id="846" Count="0" />
      <LineId Id="848" Count="0" />
      <LineId Id="857" Count="1" />
      <LineId Id="855" Count="1" />
      <LineId Id="853" Count="1" />
      <LineId Id="849" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="731" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="867" Count="1" />
      <LineId Id="870" Count="1" />
      <LineId Id="873" Count="0" />
      <LineId Id="878" Count="1" />
      <LineId Id="875" Count="1" />
      <LineId Id="866" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="862" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="732" Count="1" />
      <LineId Id="744" Count="7" />
      <LineId Id="891" Count="0" />
      <LineId Id="756" Count="1" />
      <LineId Id="892" Count="0" />
      <LineId Id="1028" Count="2" />
      <LineId Id="1043" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="1031" Count="0" />
      <LineId Id="761" Count="6" />
      <LineId Id="1032" Count="0" />
      <LineId Id="768" Count="8" />
      <LineId Id="474" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="1035" Count="3" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1062" Count="3" />
      <LineId Id="1044" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1045" Count="8" />
      <LineId Id="1055" Count="4" />
      <LineId Id="1131" Count="7" />
      <LineId Id="1126" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1034" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>