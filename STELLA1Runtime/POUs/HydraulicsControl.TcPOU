<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="HydraulicsControl" Id="{6bf4055d-2300-4039-bb16-5b9f94622e06}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM HydraulicsControl
VAR_INPUT
	// start the hydraulics
	enable:		BOOL := FALSE;
	// reset any hydraulics error
	reset: 		BOOL;
	// manual override to start the suction pump
	suction_manual:	BOOL;
	//manual override to stop the pump
	pump_manual_stop: BOOL;
END_VAR
VAR_OUTPUT
	// status of the brake: is the brake open?
	brake_open:			BOOL;
	// is the brake closed?
	brake_closed:		BOOL;
	// pump is running, but the pressure remains low
	pressure_failure:	BOOL;
	// suction was started, but it is not running
	suction_failure:	BOOL;
	// main pump is running but suction has a timeout
	hydraulics_failure:	BOOL;
	main_pump_failure: BOOL;
	// oil is low
	oil_low:			BOOL;
	// oil is high (unused?)
	oil_high:			BOOL;
	// oil pressure is 25 bars
	oil_pressure_OK:	BOOL;
	// oil is on reserve
	oil_warning:		BOOL;
	// oil filter is dirty
	oil_filter_dirty:	BOOL;
	// oil is below 10°C
	oil_cold:			BOOL;
	// oil is above 50°C
	oil_hot:			BOOL;
	// main pump is running
	pump_running:		BOOL;
	// suction pump is running
	suction_running :	BOOL := FALSE;
	// error condition
	error: 				BOOL;
END_VAR
VAR
	// command to open the brake
	iopen_brake:	BOOL := FALSE;
	// command to open the brake
	iclose_brake: BOOL;
	// monitors the pressure of the pump is running
	pressure_watchdog:	TON;
	// monitors the activation of the suction pump
	suction_watchdog: TON;
	// monitors the activation of the main pump
	main_pump_watchdog:	TON;
	// watch the hydraulics and suction pumps
	hydraulics_watchdog: TON;
	// represents the state of the main pump
	oil_pump_state:		RS;
	// represents the state of the brake
	brake_state: 		RS;
	// wait for the brake to open after pressure has been established
	brake_open_delay:	TON;
	// report brake opend after a short delay
	brake_opened_delay:	TON;
	// error state (set dominant)
	error_state:	SR;
	// trigger for suction pump
	suction_trigger:	SR;
	// timer to shut off hydraulics after break was closed
	hydraulics_off_timer:	TON  := (PT := T#300S);
	off_trigger:	F_TRIG;
	oil_level, last_oil_level:		REAL;
	HydraulicsLog,
	PumpLog,
	ReserveLog,
	oil_low_log,
	FilterLog,
	oil_max_log,
	OverTemperatureLog,
	UnderTemperatureLog,
	SuctionLog,
	HydraulicsFailureLog,
	BrakeClearingWarning,
	BrakeHydraulicsWarning,
	BrakeWarning: FB_EventLog;
	
	// measures the operating cycle of the suction pump
	suction_timer : FB_Timer;
	StatusWord, LastStatus:	UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control Logic for the Hydraulics system
* power on delay for main pump and suction pump
* start main pump if main control is ready (button pressed or remote)
* start suction pump if maximum in pan is reached
* suction pump runs for 60 seconds
* stop main pump if oil is low
* stop main pump if pressure fails for 10 seconds
*)
oil_low := NOT GVL_Hydraulics.oil_low;
oil_high := NOT GVL_Hydraulics.oil_high;
oil_warning := GVL_Hydraulics.oil_reserve;
oil_pressure_OK := GVL_Hydraulics.oil_pressure_OK;
oil_filter_dirty := NOT GVL_Hydraulics.oilfilter_dirty;
oil_cold := NOT GVL_Hydraulics.oil_undertemperature;
oil_hot := GVL_Hydraulics.oil_overtemperature;
oil_level := F_YREAL(GVL_Hydraulics.oil_level, 0, 16383, 0.0, 5.0);
pump_running := GVL_Hydraulics.pump_running;
suction_running := GVL_Hydraulics.suction_running;

error_state(SET1 := pressure_failure OR	suction_failure OR hydraulics_failure OR oil_low OR main_pump_failure,
			RESET := reset,
			Q1 => error);
// clear reset, if no error present

IF NOT error THEN
	reset := FALSE;
END_IF

oil_pump_state(SET := enable,
				RESET1 := NOT enable OR error OR pump_manual_stop OR GVL_Hydraulics.oilpan_maximum);

GVL_Hydraulics.oil_pump_enable := oil_pump_state.Q1;

(* This section controls the hydraulic brake responsible for azimuth and elevation. 
Especially the elevation is imbalanced if not in the position control loop. 
The brake must only be opened, if the elevation drive is activated concurrently.
*)


// close the brake if the pump is not running	
IF iclose_brake OR NOT pump_running THEN 
	iopen_brake := FALSE;
END_IF

// wait for pressure to build up (hack for oil_pressure_ok)
brake_open_delay(IN := pump_running AND oil_pressure_OK,
				PT := T#3S);
		
brake_state(SET := brake_open_delay.Q AND iopen_brake AND MAIN.brake_clearing,
			RESET1 := GVL_Telescope.azimut_limit_switch 
					  OR iclose_brake 
					  OR NOT pump_running
					  OR NOT MAIN.brake_clearing,
			Q1 => GVL_Telescope.brake_azimuth_eve);

// signal that the brake is open after one second
brake_opened_delay(	IN :=brake_state.Q1, 
					PT := T#1000MS,
					Q => brake_open);

brake_closed := NOT brake_open;
IF brake_closed THEN
	iclose_brake := FALSE;
END_IF
// turn off the hydraulics if the brake is closed and the pump is still running
hydraulics_off_timer(IN := brake_closed AND enable );
off_trigger(CLK := hydraulics_off_timer.Q);

IF hydraulics_off_timer.Q THEN
	enable := FALSE;
END_IF

(* This is the end of the brake control section *)

suction_trigger(SET1 := GVL_Hydraulics.oilpan_maximum OR oil_level>3.7,
				RESET := oil_level<3.0);
GVL_Hydraulics.oil_suction_enable := suction_trigger.Q1 OR suction_manual;					
suction_watchdog(IN := GVL_Hydraulics.oil_suction_enable AND NOT suction_running,
					PT := T#15S,
					Q => suction_failure);
					
pressure_watchdog(IN := GVL_Hydraulics.oil_pump_enable AND 
						NOT oil_pressure_OK,
					PT := T#30S,
				  Q => pressure_failure);
hydraulics_watchdog(IN := pump_running AND NOT suction_running,
						PT := T#140S,
						Q => hydraulics_failure);

main_pump_watchdog(IN := GVL_Hydraulics.oil_pump_enable AND NOT pump_running,
					PT := T#10S,
					Q => main_pump_failure);

StatusWord.0 := oil_low;
StatusWord.1 := oil_high;
StatusWord.2 := oil_warning;
StatusWord.3 := oil_pressure_OK;
StatusWord.4 := oil_filter_dirty;
StatusWord.5 := oil_cold;
StatusWord.6 := oil_hot;
StatusWord.7 := brake_open;
StatusWord.8 := GVL_Main.brake_clearing;
StatusWord.9 := pump_running;
StatusWord.10 := suction_running;
StatusWord.11 := GVL_Hydraulics.oilpan_maximum;
StatusWord.12 := GVL_Hydraulics.oil_pump_enable;
StatusWord.13 := GVL_Hydraulics.oil_suction_enable;
IF ABS(last_oil_level - oil_level) > 0.02 THEN
	StatusWord.15 := TRUE;
	last_oil_level := oil_level;
ELSE
	StatusWord.15 := FALSE;
END_IF

IF StatusWord<>LastStatus THEN // publish new payload every second
	LastStatus := StatusWord;
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilLow',			BOOL_TO_STRING(oil_low));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilHigh',		BOOL_TO_STRING(oil_high));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilMaximum',		BOOL_TO_STRING(GVL_Hydraulics.oilpan_maximum));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilReserve',		BOOL_TO_STRING(oil_warning));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilPressureOK', 	BOOL_TO_STRING(oil_pressure_OK));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilFilterDirty',	BOOL_TO_STRING(oil_filter_dirty));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilCold',		BOOL_TO_STRING(oil_cold));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilHot',			BOOL_TO_STRING(oil_Hot));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'BrakeOpen',		BOOL_TO_STRING(brake_open));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'BrakeClearing',	BOOL_TO_STRING(GVL_Main.brake_clearing));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'PumpRunning',	BOOL_TO_STRING(pump_running));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'SuctionRunning',	BOOL_TO_STRING(suction_running));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilLevel',		REAL_TO_STRING(oil_level));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'StatusWord',		UDINT_TO_STRING(StatusWord));
END_IF


				  				  
HydraulicsLog(Trigger := pressure_failure OR main_pump_failure,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'Main hydraulics pump / pressure: %s',
				OnMessage := 'FAILURE',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);

PumpLog(Trigger := pump_running,
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'Main hydraulics pump: %s',
				OnMessage := 'START',
				OffMessage := 'STOP',
				OffLevel := ADSLOG_MSGTYPE_HINT);
	
ReserveLog(Trigger := oil_warning,
			Level := ADSLOG_MSGTYPE_WARN,
			FormatString := 'oil reserve: %s',
			OnMessage := 'LOW',
			OffMessage := 'OK',
			OffLevel := ADSLOG_MSGTYPE_HINT);

oil_low_log(Trigger := oil_low,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'oil level: %s',
				OnMessage := 'LOW',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);

oil_max_log(Trigger := GVL_Hydraulics.oilpan_maximum,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'oil level: %s',
				OnMessage := 'MAXIMUM',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);	
				
FilterLog(Trigger := oil_filter_dirty,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'Hydraulics Filter is %s',
				OnMessage := 'dirty.');

OverTemperatureLog(Trigger := oil_hot,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'Hydraulics Temperature is %s',
				OnMessage := 'high.');
				
UnderTemperatureLog(Trigger := oil_cold,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'Hydraulics Temperature is %s',
				OnMessage := 'low.');

SuctionLog(Trigger := suction_failure,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'suction pump: %s',
				OnMessage := 'FAILURE',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);

HydraulicsFailureLog(Trigger := hydraulics_failure,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'suction pump while running main pump: %s',
				OnMessage := 'FAILURE',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);
				
BrakeClearingWarning(Trigger := NOT Main.brake_clearing AND iopen_brake,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Cannot open brake without brake clearing.');

BrakeWarning(	Trigger := brake_open,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Brake is open.',
				OffMessage := 'Brake is closed.');

BrakeHydraulicsWarning(Trigger := NOT enable AND iopen_brake,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Cannot open brake without running hydraulics.');
]]></ST>
    </Implementation>
    <Method Name="close_brake" Id="{7fefbb0e-6635-46fb-8dba-b1b28670200d}">
      <Declaration><![CDATA[METHOD close_brake : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// close the brake
iclose_brake := TRUE;

RETURN(brake_closed);]]></ST>
      </Implementation>
    </Method>
    <Method Name="open_brake" Id="{927530ea-3ed2-4333-ae45-3cb22ac63b25}">
      <Declaration><![CDATA[METHOD open_brake : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// start the pump
enable := TRUE;
// open the brake
IF oil_pressure_OK THEN
	iopen_brake := TRUE;
END_IF;
RETURN(brake_open);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="HydraulicsControl">
      <LineId Id="2699" Count="15" />
      <LineId Id="3191" Count="0" />
      <LineId Id="2715" Count="2" />
      <LineId Id="2725" Count="3" />
      <LineId Id="3478" Count="0" />
      <LineId Id="3477" Count="0" />
      <LineId Id="3479" Count="2" />
      <LineId Id="2729" Count="3" />
      <LineId Id="3095" Count="0" />
      <LineId Id="2738" Count="3" />
      <LineId Id="2744" Count="0" />
      <LineId Id="2999" Count="0" />
      <LineId Id="2750" Count="0" />
      <LineId Id="2752" Count="2" />
      <LineId Id="3003" Count="0" />
      <LineId Id="3000" Count="2" />
      <LineId Id="2755" Count="6" />
      <LineId Id="3004" Count="0" />
      <LineId Id="2762" Count="8" />
      <LineId Id="3005" Count="0" />
      <LineId Id="2771" Count="4" />
      <LineId Id="2777" Count="3" />
      <LineId Id="3195" Count="1" />
      <LineId Id="2789" Count="11" />
      <LineId Id="3098" Count="3" />
      <LineId Id="2801" Count="0" />
      <LineId Id="2815" Count="10" />
      <LineId Id="3502" Count="0" />
      <LineId Id="3504" Count="0" />
      <LineId Id="3503" Count="0" />
      <LineId Id="3381" Count="0" />
      <LineId Id="3380" Count="0" />
      <LineId Id="3382" Count="3" />
      <LineId Id="2826" Count="4" />
      <LineId Id="3500" Count="1" />
      <LineId Id="2832" Count="7" />
      <LineId Id="3288" Count="0" />
      <LineId Id="3505" Count="0" />
      <LineId Id="2840" Count="30" />
      <LineId Id="3493" Count="0" />
      <LineId Id="3495" Count="4" />
      <LineId Id="2871" Count="0" />
      <LineId Id="3494" Count="0" />
      <LineId Id="2872" Count="8" />
      <LineId Id="3491" Count="0" />
      <LineId Id="2881" Count="10" />
      <LineId Id="3483" Count="0" />
      <LineId Id="3485" Count="5" />
      <LineId Id="3484" Count="0" />
      <LineId Id="2893" Count="14" />
      <LineId Id="708" Count="0" />
    </LineIds>
    <LineIds Name="HydraulicsControl.close_brake">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="HydraulicsControl.open_brake">
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>