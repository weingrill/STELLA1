<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TelescopeControl" Id="{6a4f2e3a-c9ee-4352-b4f6-4f9d94b2c472}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TelescopeControl
VAR_INPUT
(*
TCS interface section
see https://gitlab.aip.de/bmk10k/telescope_firmware/snippets/5
*)
	
	// boolean, true: Power on, false: power off
	power: 		BOOL;
	// boolean, true: go to home position, unset track/goto if active
	gohome: 	BOOL;
	// boolean, true: go into park position, ready to stow telescope, unset track/goto
	park: 		BOOL;
	// boolean, TRUE: MOVE telescope TO last ra/de AND start tracking. Set 'goto' TO FALSE, IF TRUE. FALSE: Stop tracking as soon as possible
	track: 		BOOL;
	// boolean, TRUE: MOVE telescope TO tau/de AND stop there. Set track TO FALSE, IF TRUE. FALSE: no effect.)
	goto:		BOOL;	
	// move the telescope to a given az-alt position
	slew:		BOOL;
	// boolean, TRUE: Stop motion OF telescope immediately, set goto AND track TO FALSE. FALSE: Allow motion OF telescope again via track/goto).
	stop:		BOOL;	
	// initiates reset on all axis
	reset:		BOOL;
	// automatic tracking after goto
	autotrack:	BOOL := TRUE;
	// apparent right ascension, degrees, double
	rightascension:		LREAL := (4.0 + 35.0/60.0 + 54.09/3600.0) *15.0;	
	// apparent declination, degrees, double
	declination: 		LREAL := 16.0 + 30.0/60.0 + 25.4/3600.0;
	// desired elevation of the telescope pointing 
	elevation:	LREAL := 45.0;
	// desired azimut of the telescope pointing 
	azimuth:	LREAL := 320.0;
	// absolute offset for elevation
	elevation_offset:	LREAL := 0.0;
	// absolute offset for azimuth
	azimuth_offset : 	LREAL := 0.0;
	// absolute offset for time
	time_offset: 		LREAL := 0.0;
	// offset for the de-rotator
	derotator_offset:	LREAL := 0.0;
	// Nasmyth port 1 or 2
	Nasmyth_port: 		USINT;
END_VAR
VAR
	// actual command from the TCS
	TCS_command: 	E_TCSCommand;
	// current Julian Date calculated from system time
	jd:				LREAL;
	// image derotation
	derotation_calc:	LREAL;
	// local siderial time calculated from Julian date
	lst:			LREAL;
	// elevation calulated when ra and dec are set by TCS
	elevation_calc:	LREAL; 
	// azimuth calulated when ra and dec are set by TCS
	azimuth_calc:	LREAL;
	// right ascension calulated when azimuth and elevation are set by TCS
	rightascension_calc:	LREAL;
	// declination calulated when azimuth and elevation are set by TCS
	declination_calc:		LREAL;
	// hour angle
	Hourangle_calc: LREAL;
	// precise astronomical	time
	fbTime: FB_AstroClock;
	
	eq2hor2:	FB_EQ2HOR2;
	hor2eq:		FB_HOR2EQ;
	
	// triggers power-failure event
	powerfailure: 	BOOL;
	// triggers power warning
	poweronwarning:	TP;
	// power on timeout
	power_timeout:	TON;
	// command timeout
	command_timeout:	TON;
	// tracking delay
	tracking_delay:	TON;
	// telescope is parked
	isparked:		BOOL;
	TCSpowerEvent,
	TCSgohomeEvent,
	TCSparkEvent,
	TCSgotoEvent,
	TCStrackEvent,
	TCSstopEvent,
	AltitudeEvent,
	TCSreadyEvent,
	TCSCTOEvent: FB_Eventlog;
	MQTTTimer : TON := (PT:=T#5S);
	// rotational velocity of the derotator
	DerotatorVelocity: LREAL;
	// rotational velocity of the elevation
	ElevationVelocity: LREAL;
	// rotational velocity of the elevation
	AzimuthVelocity: LREAL;
	// sign of derotation
	derotatation_sign: LREAL := 1.0;
	StatusWord, LastStatus:	UDINT;
END_VAR
VAR_OUTPUT
	//		TRUE, IF telescope can be operated
	ready:		BOOL; 
	// indicates an error on one of the components
	error:		BOOL;	
	//error id of axis
	errorid:	UDINT;	
	//TRUE, IF telescope is in fast-MOVE phase (includes pole-swap)
	sliding:	BOOL;	
	//TRUE, IF telescope is on tracking position AND currently tracking.
	tracking:	BOOL;	
	//TRUE, IF telescope is AT rest.
	stopped:	BOOL;	
	// true position of the elevation
	elevation_current:	LREAL;
	// true position of the azimuth
	azimuth_current:	LREAL;
	// true position of the de-rotator
	derotator_current:	LREAL;
	//	(time in sec. to reach the goto/track position)
	slewtime:			LREAL; 
	// True: telescope is calibrated
	homed:				BOOL;
	// telescope does not accept further commands
	busy:				BOOL;
END_VAR
VAR CONSTANT
// STELLA1
	// telescope site longitude, source: Google 
	longitude: 		LREAL := -16.50926; //13.101867;
	// telescope site latitude, source: Google
	latitude: 		LREAL := 28.30120; //52.404940;
	// telescope site height above sea level: estimated
	altitude: 		LREAL := 2390.0;
	elevation_park: LREAL := 60.0;
	azimuth_park: 	LREAL := 359.999;
	derotator_park: LREAL := 229.85;

	elevation_home: LREAL := 55.0;
	azimuth_home: 	LREAL := 180.0;
END_VAR
VAR PERSISTENT
	// azimuth axis offset/misalignment north-south
	AN_E:	LREAL;
	// azimuth axis offset/misalignment east-west
	AE_E:	LREAL;
	// gravitational flexure correction at the horizon
	TF:		LREAL;
	// collimation error of the electromagnetic axis
	BNP:	LREAL;
	// azimuth axis offset/misalignment north-south
	AN_A:	LREAL;
	// azimuth axis offset/misalignment east-west,
	AE_A:	LREAL;
	// Non-perpendicularity between the mount azimuth and elevation axes
	NPAE:	LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[TelescopeAuxiliary();

// get the system time
fbTime();
jd := DateTime2JD(fbTime.time_RTCEX2);
lst := CT2LST(longitude, jd);
// set reset state either by hardware (key pressed) or by software (set by e.g. tcs)
IF GVL_Main.reset_switch THEN
	reset := TRUE;
END_IF


IF ElevationControl.error THEN
	errorid := ElevationControl.ErrorID;
	ElevationControl.reset := reset;
ELSIF AzimuthElevationControl.error THEN
	errorid := AzimuthElevationControl.ErrorID;
	AzimuthElevationControl.Reset := reset;
ELSIF FilterWheelControl.Error THEN
	errorid := FilterWheelControl.ErrorID;
	FilterWheelControl.Reset := reset;
ELSIF Focuscontrol.Error THEN
	errorid := Focuscontrol.ErrorID;
	FocusControl.reset := reset;
ELSIF DerotatorControl.Error THEN
	errorid := DerotatorControl.ErrorID;
	DerotatorControl.reset := reset;
END_IF

error := ElevationControl.error OR 
		 AzimuthElevationControl.error OR
		 FilterWheelControl.Error OR
		 Focuscontrol.Error OR
		 DerotatorControl.Error;

slewtime := MAX(MAX(ElevationControl.slewtime, AzimuthElevationControl.slewtime), DerotatorControl.slewtime);
			
IF error THEN
	gohome := 	FALSE;
	track := 	FALSE;
	goto := 	FALSE;
	slew := 	FALSE;
ELSE
	errorid := 0;
END_IF

IF ElevationControl.error THEN
	ElevationControl.enable := FALSE;
	AzimuthElevationControl.enable := FALSE;
	HydraulicsControl.close_brake();
END_IF

eq2hor2(alpha := rightascension,
	delta := declination,
	lon := longitude,
	lat := latitude,
	JD := jd + time_offset,
	alt => elevation_calc,
	az => azimuth_calc,
	ha => hourangle_calc);

// apply pointing model
elevation_calc := elevation_calc + PointingModelElevation(azimuth_calc, elevation_calc, elevation_offset, AN_E, AE_E, TF);
azimuth_calc := azimuth_calc + PointingModelAzimuth(azimuth_calc, elevation_calc, azimuth_offset, BNP, AN_A, AE_A, NPAE);
// calculate derotator position 
derotation_calc := F_DerotatorPosition2(azimuth_calc, elevation_calc, declination_calc, latitude, derotatation_sign)  + derotator_offset;
// calculate velocities
DerotatorVelocity := F_Derotatorvelocity(elevation_calc, azimuth_calc, latitude);
ElevationVelocity := F_Elevationvelocity(azimuth_calc, latitude);
AzimuthVelocity := F_Azimuthvelocity(elevation_calc, azimuth_calc, latitude);

IF (azimuth_calc > 310.0 AND AzimuthVelocity > 0.0) OR (azimuth_calc > 440.0) THEN
	azimuth_calc := azimuth_calc - 360.0;
ELSIF (azimuth_calc < 80.0 AND AzimuthVelocity < 0.0) OR (azimuth_calc < -50.0) THEN
	azimuth_calc := azimuth_calc + 360.0;
END_IF

IF (derotation_calc > 290.0 AND DerotatorVelocity > 0.0) OR (derotation_calc > 380.0) THEN
	derotation_calc := derotation_calc - 360.0;
ELSIF (derotation_calc < 20.0 AND DerotatorVelocity < 0.0) OR (derotation_calc < -70.0) THEN
	derotation_calc := derotation_calc + 360.0;
END_IF
// get current coordinates	
azimuth_current := AzimuthElevationControl.act_position;
elevation_current := ElevationControl.actual_position;
derotator_current := DerotatorControl.actual_position;

// calculate equatorial coordinates
hor2eq(alt := elevation_current - PointingModelElevation(azimuth_calc, elevation_calc, elevation_offset, AN_E, AE_E, TF), 
		az := azimuth_current - PointingModelAzimuth(azimuth_calc, elevation_calc, azimuth_offset, BNP, AN_A, AE_A, NPAE),
		jd := jd,
		lat := latitude,
		lon := longitude,
		altitude := altitude,
		ra => rightascension_calc,
		dec => declination_calc);		
	
poweronwarning(IN := power OR (NOT ElevationControl.enable AND HydraulicsControl.brake_open), PT := T#250MS);

power_timeout(IN := TCS_command = E_TCSCommand.no_command AND NOT isparked, PT := T#12H);
command_timeout();
IF power_timeout.Q AND NOT isparked THEN
	park := TRUE;
END_IF

IF Nasmyth_port = 1 THEN
	NasmythControl.right := FALSE;
	IF NasmythControl.Nasmyth_left THEN
		NasmythControl.left := FALSE;
		NasmythControl.enable := FALSE;
	ELSE
		NasmythControl.left := TRUE;
		NasmythControl.enable := TRUE;
	END_IF
ELSIF Nasmyth_port = 2 THEN
	NasmythControl.left := FALSE;
    IF NasMythControl.Nasmyth_right THEN
		NasmythControl.right := FALSE;
		NasmythControl.enable := FALSE;
	ELSE
		NasmythControl.right := TRUE;
		NasmythControl.enable := TRUE;
	END_IF
ELSE
	NasmythControl.right := FALSE;
	NasmythControl.left := FALSE;
	NasmythControl.enable := FALSE;	
END_IF
	
		
// set TCS_command according to state variables ordered by precedence
IF power THEN
	TCS_command := E_TCSCommand.poweron;
ELSIF stop THEN
	TCS_command := E_TCSCommand.stop;
	goto := FALSE;
	track := FALSE;
	slew := FALSE;
	gohome := FALSE;
	park := FALSE;
ELSIF park THEN
	goto := FALSE;
	track := FALSE;
	slew := FALSE;
	IF ready AND stopped THEN
		TCS_command := E_TCSCommand.park;
	END_IF
ELSIF gohome THEN
	goto := FALSE;
	track := FALSE;
	slew := FALSE;
	IF ready AND NOT busy AND stopped THEN
		TCS_command := E_TCSCommand.gohome;
	END_IF
ELSIF goto THEN
	track := FALSE;
	slew := FALSE;
	IF ready AND NOT busy THEN
		TCS_command := E_TCSCommand.goto;
	END_IF
ELSIF slew THEN
	goto := FALSE;
	track := FALSE;
	IF ready AND NOT busy THEN
		TCS_command := E_TCSCommand.slew;
	END_IF
ELSIF track THEN
	goto := FALSE;
	slew := FALSE;
	IF ready AND NOT busy THEN
		TCS_command := E_TCSCommand.track;
	END_IF
ELSE
	TCS_command := E_TCSCommand.no_command;
	ElevationControl.MoveAxis := FALSE;
	AzimuthElevationControl.MoveAxis := FALSE;
	DerotatorControl.MoveAxis := FALSE;
	ElevationControl.Tracking := FALSE;
	AzimuthElevationControl.Tracking := FALSE;
	DerotatorControl.Tracking := FALSE;
END_IF

IF TCS_command = E_TCSCommand.poweron THEN
	poweron();
	command_timeout(IN := TCS_command = E_TCSCommand.poweron, PT := T#12H);
	TCSCTOEvent.OnMessage := 'POWER';
ELSIF TCS_command = E_TCSCommand.stop THEN
	stoptelescope();
	command_timeout(IN := TCS_command = E_TCSCommand.stop, PT := T#2S);
	TCSCTOEvent.OnMessage := 'STOP';
ELSIF TCS_command = E_TCSCommand.park THEN
	parktelescope();
	command_timeout(IN := TCS_command = E_TCSCommand.park, PT := T#2M);
	TCSCTOEvent.OnMessage := 'PARK';
ELSIF TCS_command = E_TCSCommand.gohome THEN
	hometelescope();
	command_timeout(IN := TCS_command = E_TCSCommand.gohome, PT := T#2M);
	TCSCTOEvent.OnMessage := 'GOHOME';
ELSIF TCS_command = E_TCSCommand.goto THEN
	gototelescope();
	command_timeout(IN := TCS_command = E_TCSCommand.goto, PT := T#2M);
	TCSCTOEvent.OnMessage := 'GOTO';
ELSIF TCS_command = E_TCSCommand.slew THEN
	slewtelescope();
	command_timeout(IN := TCS_command = E_TCSCommand.slew, PT := T#2M);
	TCSCTOEvent.OnMessage := 'SLEW';
ELSIF TCS_command = E_TCSCommand.track THEN
	tracktelescope();
	command_timeout(IN := TCS_command = E_TCSCommand.track, PT := T#12H);
	TCSCTOEvent.OnMessage := 'TRACK';
ELSE
	// disable command timeout
	command_timeout(IN := FALSE);
	TCSCTOEvent.OnMessage := 'NOCOMMAND';
END_IF
 
sliding := NOT tracking AND (ElevationControl.ElevationAxis.InMotion OR ElevationControl.ElevationAxis.InRamp OR
			AzimuthElevationControl.AzimuthAxis.InMotion OR AzimuthElevationControl.AzimuthAxis.InRamp OR
			DerotatorControl.DerotatorAxis.InMotion OR DerotatorControl.DerotatorAxis.InRamp);

// signal must be stable for 5500MS			
tracking_delay(in := ElevationControl.ElevationAxis.isTracking AND 
			AzimuthElevationControl.AzimuthAxis.isTracking AND
			DerotatorControl.DerotatorAxis.isTracking,PT :=T#5500MS, Q => tracking);
			
stopped :=  (NOT ElevationControl.enable OR ElevationControl.ElevationAxis.StandStill) AND 
			(NOT AzimuthElevationControl.Enable OR AzimuthElevationControl.AzimuthAxis.StandStill) AND
			(NOT DerotatorControl.enable OR DerotatorControl.DerotatorAxis.StandStill);
			
homed := ElevationControl.Calibrated AND
			AzimuthElevationControl.calibrated AND
			FilterWheelControl.Calibrated AND
			FocusControl.Calibrated AND
			DerotatorControl.Calibrated;
			
ready := homed AND 
	CoverControl.isopen AND 
	ElevationControl.enable AND
	AzimuthElevationControl.enable AND
	DerotatorControl.enable AND HydraulicsControl.brake_open AND 
    NOT error;

busy := ElevationControl.ElevationAxis.Busy OR
		AzimuthElevationControl.AzimuthAxis.Busy OR
		DerotatorControl.DerotatorAxis.Busy OR
		FocusControl.FocusAxis.Busy OR
		FilterWheelControl.FilterWheelAxis.Busy;
		
// unset the STOP command if telescope is already stopped
IF stopped THEN
	stop := FALSE;
END_IF
	
IF NOT error THEN
	reset := FALSE;
END_IF

IF SafetyHandling.Emergency_stop THEN
	ElevationControl.enable := FALSE;
	AzimuthElevationControl.enable := FALSE;
	DerotatorControl.enable := FALSE;
END_IF
IF sliding OR track OR tracking THEN
	MQTTTimer.PT := T#1000MS;
ELSE
	MQTTTimer.PT := T#5000MS;
END_IF
MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);

	MAIN.MQTTClient.Publish('telescope', 'dome', 'JulianDate', LREAL_TO_STRING(jd));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'LocalSiderialTime', LREAL_TO_STRING(lst));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Azimuth', LREAL_TO_STRING(azimuth_current));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Elevation', LREAL_TO_STRING(elevation_current));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Derotator', LREAL_TO_STRING(derotator_current));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'HourAngle', LREAL_TO_STRING(hourangle_calc));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'RightAscension', LREAL_TO_STRING(rightascension_calc));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Declination', LREAL_TO_STRING(declination_calc));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'azimuth_offset', LREAL_TO_STRING(azimuth_offset));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'elevation_offset', LREAL_TO_STRING(elevation_offset));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'derotator_torque', LREAL_TO_STRING(DerotatorControl.derotator_torque));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'elevation_torque', LREAL_TO_STRING(ElevationControl.elevation_torque));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'azimuth_torque', LREAL_TO_STRING(AzimuthElevationControl.azimuth_torque));
	
	MAIN.MQTTClient.Publish('telescope', 'dome', 'errorid',		UDINT_TO_STRING(errorid));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'error',		BOOL_TO_STRING(error));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'ready',		BOOL_TO_STRING(ready));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'busy',		BOOL_TO_STRING(busy));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'sliding',		BOOL_TO_STRING(sliding));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'tracking', 	BOOL_TO_STRING(tracking));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'stopped',		BOOL_TO_STRING(stopped));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'homed',		BOOL_TO_STRING(homed));
END_IF

StatusWord.0 := error;
StatusWord.1 := ready;
StatusWord.2 := sliding;
StatusWord.3 := tracking;
StatusWord.4 := stopped;
StatusWord.5 := homed;
StatusWord.6 := power;
StatusWord.7 := park;
StatusWord.8 := gohome;
StatusWord.9 := track;
StatusWord.10 := goto;
StatusWord.11 := slew;
StatusWord.12 := stop;
StatusWord.13 := busy;

IF StatusWord<>LastStatus THEN // publish new payload every second
	LastStatus := StatusWord;
	MAIN.MQTTClient.Publish('telescope', 'dome', 'error',		BOOL_TO_STRING(error));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'ready',		BOOL_TO_STRING(ready));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'sliding',		BOOL_TO_STRING(sliding));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'tracking', 	BOOL_TO_STRING(tracking));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'stopped',		BOOL_TO_STRING(stopped));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'homed',		BOOL_TO_STRING(homed));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'power',		BOOL_TO_STRING(power));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'park',		BOOL_TO_STRING(park));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'gohome',		BOOL_TO_STRING(gohome));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'track',		BOOL_TO_STRING(track));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'goto',		BOOL_TO_STRING(goto));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'slew',		BOOL_TO_STRING(slew));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'stop',		BOOL_TO_STRING(stop));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'busy',		BOOL_TO_STRING(busy));
END_IF


(* Event function blocks start here. *)
TCSpowerEvent(	Trigger := powerfailure, 
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'power %s',
				OnMessage := 'Failure',
				OffMessage := 'OK');

TCSgohomeEvent(	Trigger := gohome, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'GOHOME %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCSparkEvent(	Trigger := park, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'PARK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCSgotoEvent(	Trigger := goto, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'GOTO %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCStrackEvent(	Trigger := track, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'TRACK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCSstopEvent(	Trigger := stop, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'STOP %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed',
				OffLevel := ADSLOG_MSGTYPE_HINT);
AltitudeEvent(	Trigger := power AND elevation_calc<0.0, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Target below horizon',
				OffMEssage := '');
TCSreadyEvent(	Trigger := power AND ready, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := '%s',
				OnMessage := 'STELLA1 startup finished');
TCSCTOEvent(	Trigger := command_timeout.Q, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'A timeout occured during %s command!',
				OnMessage := 'NOCOMMAND');]]></ST>
    </Implementation>
    <Method Name="gototelescope" Id="{c7053474-39ba-4cc3-ab24-2521b02cf8f4}">
      <Declaration><![CDATA[METHOD gototelescope: USINT
VAR_INPUT
END_VAR
VAR
	GoToEvent:	FB_Eventlog;
	command_timeout:	TON;
END_VAR
VAR_STAT
	Stage:		USINT := 0;
	LastStage:	USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[gototelescope := Stage;
command_timeout(IN := Stage < 100, PT := T#600S);
IF command_timeout.Q THEN
	error := TRUE;
	errorid := 16#10;
	goto := FALSE;
	Stage := 0;
	RETURN;
END_IF

IF elevation_calc<2.0 THEN
	error := TRUE;
	errorid := 16#15;
	goto := FALSE;
	Stage := 0;
	RETURN;
END_IF

IF reset OR error THEN
	Stage := 0;
	RETURN;
END_IF

CASE Stage OF
	0:	
		IF ready AND NOT busy THEN
			Stage := 25;
		END_IF
	25:	
		ElevationControl.position := elevation_calc;
		AzimuthElevationControl.position := azimuth_calc;
		DerotatorControl.position := derotation_calc;
		DerotatorControl.Velocity := 10.0;
		ElevationControl.velocity := 10.0;
		AzimuthElevationControl.velocity := 10.0;
		
		ElevationControl.MoveAxis := TRUE;
		AzimuthElevationControl.MoveAxis := TRUE;
		DerotatorControl.MoveAxis := TRUE;
		IF ElevationControl.ElevationAxis.Busy AND
			AzimuthElevationControl.AzimuthAxis.Busy AND
			DerotatorControl.DerotatorAxis.Busy THEN
				Stage := 50;
		END_IF
	50:
		IF NOT ElevationControl.ElevationAxis.Busy AND ElevationControl.ElevationAxis.MoveDone THEN
			ElevationControl.MoveAxis := FALSE;
		END_IF
		IF NOT AzimuthElevationControl.AzimuthAxis.Busy AND AzimuthElevationControl.AzimuthAxis.MoveDone THEN
			AzimuthElevationControl.MoveAxis := FALSE;
		END_IF
		IF NOT DerotatorControl.DerotatorAxis.Busy AND DerotatorControl.DerotatorAxis.MoveDone THEN
			DerotatorControl.MoveAxis := FALSE;
		END_IF
		IF NOT ElevationControl.MoveAxis AND 
           NOT AzimuthElevationControl.MoveAxis AND 
		   NOT DerotatorControl.MoveAxis THEN
		   Stage := 75;
		END_IF
	75:
		IF NOT sliding AND stopped THEN // all axis standstill
			Stage := 100;
		END_IF
	100:
		ElevationControl.MoveAxis := FALSE;
		AzimuthElevationControl.MoveAxis := FALSE;
		DerotatorControl.MoveAxis := FALSE;
		azimuth := azimuth_calc;
		elevation := elevation_calc;
		goto := FALSE;
		// enable automatic tracking
		track := autotrack;
		Stage := 0;
END_CASE
GoToEvent(Trigger := Stage > LastStage, FormatString := 'GoTo progress: %s', OnMessage := USINT_TO_STRING(Stage));
LastStage := Stage;]]></ST>
      </Implementation>
    </Method>
    <Method Name="hometelescope" Id="{2c96c3e4-ffc4-4f92-b3af-46d302446b40}">
      <Declaration><![CDATA[METHOD hometelescope : BOOL
VAR_INPUT
END_VAR

VAR
	HomeEvent: FB_Eventlog;
	command_timeout: TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[command_timeout(IN := NOT hometelescope, PT := T#600S);
IF command_timeout.Q THEN
	error := TRUE;
	errorid := 16#30;
	hometelescope :=TRUE;
END_IF

IF ready AND stopped AND NOT busy AND NOT tracking THEN
	ElevationControl.velocity := 10.0;
	ElevationControl.position := elevation_home;
	ElevationControl.MoveAxis := TRUE;
	AzimuthElevationControl.velocity := 10.0;
	AzimuthElevationControl.position := azimuth_home;
	AzimuthElevationControl.MoveAxis := TRUE;
	DerotatorControl.Velocity := 10.0;
	DerotatorControl.position := 180.0;
	DerotatorControl.MoveAxis := TRUE;	
END_IF

IF ElevationControl.ElevationAxis.MoveDone AND 
	AzimuthElevationControl.AzimuthAxis.MoveDone AND 
	DerotatorControl.DerotatorAxis.MoveDone THEN
	gohome := FALSE;
	elevation := elevation_current;
	azimuth := azimuth_current;
	hometelescope := TRUE;
ELSE
	hometelescope := FALSE;
END_IF

HomeEvent(Trigger := hometelescope, 
			Level := ADSLOG_MSGTYPE_HINT,
			FormatString := '%s',
			OnMessage := 'Telescope is homed.');]]></ST>
      </Implementation>
    </Method>
    <Method Name="parktelescope" Id="{99ae1f40-9696-469a-b290-774914abbb25}">
      <Declaration><![CDATA[METHOD parktelescope: USINT
VAR_INPUT
END_VAR
VAR
	ParkEvent:	FB_Eventlog;
END_VAR
VAR_STAT
	Stage:		USINT := 0;
	LastStage:	USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parktelescope := Stage;
IF reset OR error THEN
	Stage := 0;
END_IF
IF isparked THEN
	Stage := 100;
END_IF
CASE Stage OF
	0: 
		gohome := 	FALSE;
		track := 	FALSE;
		goto := 	FALSE;
		slew := 	FALSE;
		Focuscontrol.position := 53.6;
		// disable filterwheel
		FilterWheelControl.Enable := FALSE;
		IF Error THEN // emergency park
			HydraulicsControl.close_brake();
			ElevationControl.enable := FALSE;
			AzimuthElevationControl.Enable := FALSE;
			DerotatorControl.enable := FALSE;	
			CoverControl.close := TRUE;	
			Stage := 80;
		END_IF
		Stage := 20;
	20:
		ElevationControl.position := elevation_park;
		ElevationControl.velocity := 10.0;
		ElevationControl.MoveAxis := TRUE;
		AzimuthElevationControl.position := azimuth_park;
		AzimuthElevationControl.velocity := 10;
		AzimuthElevationControl.MoveAxis := TRUE;
		DerotatorControl.position := derotator_park;
		DerotatorControl.Velocity := 10.0;
		DerotatorControl.MoveAxis := TRUE;
		IF ElevationControl.ElevationAxis.Busy AND
			AzimuthElevationControl.AzimuthAxis.Busy AND
			DerotatorControl.DerotatorAxis.Busy THEN
				Stage := 40;
		END_IF
	40:
		IF ElevationControl.ElevationAxis.MoveDone THEN
			ElevationControl.MoveAxis := FALSE;
		END_IF
		IF AzimuthElevationControl.AzimuthAxis.MoveDone THEN
			AzimuthElevationControl.MoveAxis := FALSE;
		END_IF
		IF DerotatorControl.DerotatorAxis.MoveDone THEN
			DerotatorControl.MoveAxis := FALSE;
		END_IF
		IF NOT sliding THEN // all axis standstill
			Stage := 60;
		END_IF
	60:
		IF NOT ElevationControl.enable AND NOT AzimuthElevationControl.Enable AND NOT DerotatorControl.enable THEN
			stage := 80;
		END_IF
		
		IF stopped THEN 
			ElevationControl.enable := FALSE;
			AzimuthElevationControl.Enable := FALSE;
			DerotatorControl.enable := FALSE;
		END_IF
		
		ElevationControl.MoveAxis := FALSE;
		AzimuthElevationControl.MoveAxis := FALSE;
		DerotatorControl.MoveAxis := FALSE;
	80:
		IF ElevationControl.enable OR AzimuthElevationControl.Enable OR DerotatorControl.enable THEN
			stage := 60;
		END_IF
		IF HydraulicsControl.brake_closed THEN
			CoverControl.close := TRUE;
			HydraulicsControl.enable := FALSE;			
		END_IF
		IF CoverControl.isclosed THEN
			Stage := 100;
		END_IF
	100:
			isparked := TRUE;
			park := FALSE;
			parktelescope := 100;
			Stage := 0;	
END_CASE
ParkEvent(Trigger := Stage > LastStage, FormatString := 'Parking progress: %s', OnMessage := USINT_TO_STRING(Stage));
LastStage := Stage;]]></ST>
      </Implementation>
    </Method>
    <Method Name="poweron" Id="{34114692-caf6-4cf5-8270-8b1671f5dd0a}">
      <Declaration><![CDATA[METHOD poweron : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Main.brake_clearing THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: brake clearing not set';
	power := FALSE;
ELSIF NOT Transformer.power_OK THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: main power failure';
	power := FALSE;
ELSIF NOT Transformer.phase_available THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: hydraulics power failure';
	power := FALSE;
ELSIF error THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'Generic error during power on occured.';
	power := FALSE;
ELSE
	powerfailure := FALSE;		
END_IF
// COVER MUST BE OPENED FOR A SUCCESSFUL WAKE & SHAKE COMMAND!
Covercontrol.open := TRUE;

// enable elevation, enable azimuth
IF MAIN.ready AND CoverControl.isopen THEN
	ElevationControl.enable := TRUE;
	AzimuthElevationControl.enable := TRUE;
	DerotatorControl.enable := TRUE;
	FilterWheelControl.Enable := TRUE;
END_IF

IF ElevationControl.Ready AND NOT ElevationControl.Calibrated THEN
	ElevationControl.HomeAxis := TRUE;
END_IF

IF AzimuthElevationControl.ready AND NOT AzimuthElevationControl.calibrated THEN
	AzimuthElevationControl.HomeAxis := TRUE;
END_IF

// enable derotator
IF ElevationControl.Ready THEN
	DerotatorControl.HomeAxis := DerotatorControl.Ready AND NOT DerotatorControl.Calibrated;
END_IF

// home filterwheel after Derotator Axis to avoid additional torque
IF DerotatorControl.Calibrated THEN
	FilterWheelControl.HomeAxis := FilterWheelControl.Ready AND NOT FilterWheelControl.Calibrated;
END_IF

// start calibration of focus after elevation has been calibrated
// this avoids imbalance by the M2 mirror on the elvation during its calibration
IF ElevationControl.Calibrated AND NOT FocusControl.Calibrated THEN
	FocusControl.enable := TRUE;
	FocusControl.HomeAxis := TRUE;
END_IF

IF CoverControl.isopen AND 
	ElevationControl.Calibrated AND
	AzimuthElevationControl.calibrated AND
	DerotatorControl.Calibrated AND
	FilterWheelControl.Calibrated AND
	FocusControl.Calibrated THEN
	power := FALSE;
	poweron := TRUE;
	isparked := FALSE;
	// rest filterwheel until reactivation on filter change
	FilterWheelControl.Enable := FALSE;
	// slew the telescope to the home position
	gohome := TRUE;
ELSE
	poweron := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="slewtelescope" Id="{e66a400f-15f7-407b-9ae1-f4d90da8099d}">
      <Declaration><![CDATA[METHOD slewtelescope : USINT
VAR_INPUT
END_VAR
VAR
	SlewEvent:	FB_Eventlog;
	command_timeout: TON;
END_VAR
VAR_STAT
	Stage:		USINT := 0;
	LastStage:	USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[slewtelescope := Stage;
command_timeout(IN := Stage < 100, PT := T#600S);
IF command_timeout.Q THEN
	error := TRUE;
	errorid := 16#40;
	slew := FALSE;
	Stage := 0;
END_IF
IF reset OR error THEN
	Stage := 0;
END_IF
CASE Stage OF
	0:	
		IF ready AND stopped AND NOT busy AND NOT tracking THEN
			Stage := 25;
		END_IF
	25:
		ElevationControl.position := elevation;
		ElevationControl.velocity := 10.0;
		ElevationControl.MoveAxis := TRUE;
		AzimuthElevationControl.position := azimuth;
		AzimuthElevationControl.velocity := 10.0;
		AzimuthElevationControl.MoveAxis := TRUE;
		DerotatorControl.position := elevation + derotator_offset;
		DerotatorControl.Velocity := 10.0;
		DerotatorControl.MoveAxis := TRUE;
		IF ElevationControl.ElevationAxis.Busy AND
			AzimuthElevationControl.AzimuthAxis.Busy AND
			DerotatorControl.DerotatorAxis.Busy THEN
				Stage := 50;
		END_IF
	50:
		IF ElevationControl.ElevationAxis.MoveDone THEN
			ElevationControl.MoveAxis := FALSE;
		END_IF
		
		IF AzimuthElevationControl.AzimuthAxis.MoveDone THEN
			AzimuthElevationControl.MoveAxis := FALSE;
		END_IF

		IF DerotatorControl.DerotatorAxis.MoveDone THEN
			DerotatorControl.MoveAxis := FALSE;
		END_IF
		IF NOT sliding AND stopped THEN // all axis standstill
			Stage := 100;
		END_IF
	100:
		ElevationControl.MoveAxis := FALSE;
		AzimuthElevationControl.MoveAxis := FALSE;
		DerotatorControl.MoveAxis := FALSE;
		rightascension := rightascension_calc;
		declination := declination_calc;
		slew := FALSE;
		Stage := 0;
END_CASE
SlewEvent(Trigger := Stage > LastStage, FormatString := 'Slew progress: %s', OnMessage := USINT_TO_STRING(Stage));
LastStage := Stage;		

]]></ST>
      </Implementation>
    </Method>
    <Method Name="stoptelescope" Id="{3ed2c63a-7819-48f1-a5e6-de7431397407}">
      <Declaration><![CDATA[METHOD stoptelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ElevationControl.StopAxis := TRUE;
AzimuthElevationControl.StopAxis := TRUE;
DerotatorControl.StopAxis := TRUE;
IF stopped THEN
	ElevationControl.StopAxis := FALSE;
	AzimuthElevationControl.StopAxis := FALSE;
	DerotatorControl.StopAxis := FALSE;
	stop := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="tracktelescope" Id="{8d4fcfbf-479d-4826-a883-1021b018a460}">
      <Declaration><![CDATA[METHOD tracktelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Elevation
DerotatorVelocity := F_Derotatorvelocity(elevation_calc, azimuth_calc, latitude);
ElevationVelocity := F_Elevationvelocity(azimuth_calc, latitude);
AzimuthVelocity := F_Azimuthvelocity(elevation_calc, azimuth_calc, latitude);
IF elevation_current < 5.0 OR elevation_current > 89.5 THEN 
	track := FALSE;
END_IF
IF azimuth_current > 440.0 THEN
	track := FALSE;
END_IF
IF (derotator_current < -69.0 AND DerotatorVelocity<0.0) OR (derotator_current > 379.0 AND DerotatorVelocity>0.0) THEN
	track := FALSE;
END_IF

ElevationControl.position := elevation_calc;
IF NOT ElevationControl.Tracking THEN
	ElevationControl.velocity := 10.0;
	ElevationControl.MoveAxis := TRUE;
	IF NOT ElevationControl.ElevationAxis.Busy AND ElevationControl.ElevationAxis.MoveDone THEN
		ElevationControl.MoveAxis := FALSE;
		IF ElevationControl.ElevationAxis.isTracking THEN
			ElevationControl.velocity := ElevationVelocity;
		ELSE
			ElevationControl.velocity := 3.0*ElevationVelocity;
		END_IF
		ElevationControl.velocity := ElevationVelocity;
		ElevationControl.Tracking := TRUE;
	END_IF
ELSE
	ElevationControl.velocity := ElevationVelocity;
END_IF

// Azimuth
AzimuthElevationControl.position := azimuth_calc;
IF NOT AzimuthElevationControl.Tracking THEN
	AzimuthElevationControl.velocity := 10.0;
	AzimuthElevationControl.MoveAxis := TRUE;
	IF NOT AzimuthElevationControl.AzimuthAxis.Busy AND AzimuthElevationControl.AzimuthAxis.MoveDone THEN
		AzimuthElevationControl.MoveAxis := FALSE;
		IF AzimuthElevationControl.AzimuthAxis.isTracking THEN
			AzimuthElevationControl.velocity := AzimuthVelocity;
		ELSE
			AzimuthElevationControl.velocity := 3.0*AzimuthVelocity;
		END_IF
		AzimuthElevationControl.velocity := AzimuthVelocity;
		AzimuthElevationControl.Tracking := TRUE;
	END_IF
ELSE
	AzimuthElevationControl.velocity := AzimuthVelocity;
END_IF

// Derotator
DerotatorControl.position := derotation_calc;
IF NOT DerotatorControl.Tracking THEN
	DerotatorControl.Velocity := 10.0;
	DerotatorControl.MoveAxis := TRUE;
	IF NOT DerotatorControl.DerotatorAxis.Busy AND DerotatorControl.DerotatorAxis.MoveDone THEN
		DerotatorControl.MoveAxis := FALSE;
		IF DerotatorControl.DerotatorAxis.isTracking THEN
			DerotatorControl.Velocity := DerotatorVelocity;
		ELSE
			DerotatorControl.Velocity := 3.0*DerotatorVelocity;
		END_IF
		DerotatorControl.Velocity := DerotatorVelocity;
		DerotatorControl.Tracking := TRUE;
	END_IF
ELSE
	DerotatorControl.Velocity := DerotatorVelocity;
END_IF
		
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TelescopeControl">
      <LineId Id="5012" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="3290" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="628" Count="1" />
      <LineId Id="7470" Count="1" />
      <LineId Id="645" Count="0" />
      <LineId Id="4249" Count="1" />
      <LineId Id="7318" Count="0" />
      <LineId Id="4251" Count="0" />
      <LineId Id="4301" Count="0" />
      <LineId Id="7319" Count="0" />
      <LineId Id="4253" Count="0" />
      <LineId Id="4302" Count="0" />
      <LineId Id="7320" Count="0" />
      <LineId Id="4312" Count="0" />
      <LineId Id="4315" Count="0" />
      <LineId Id="7322" Count="0" />
      <LineId Id="4316" Count="1" />
      <LineId Id="7323" Count="0" />
      <LineId Id="4318" Count="0" />
      <LineId Id="4252" Count="0" />
      <LineId Id="6575" Count="4" />
      <LineId Id="6581" Count="0" />
      <LineId Id="6601" Count="0" />
      <LineId Id="6600" Count="0" />
      <LineId Id="6598" Count="0" />
      <LineId Id="4330" Count="0" />
      <LineId Id="6587" Count="0" />
      <LineId Id="6589" Count="2" />
      <LineId Id="8725" Count="1" />
      <LineId Id="6586" Count="0" />
      <LineId Id="8274" Count="0" />
      <LineId Id="4246" Count="1" />
      <LineId Id="5528" Count="1" />
      <LineId Id="4248" Count="0" />
      <LineId Id="8275" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1795" Count="3" />
      <LineId Id="2008" Count="2" />
      <LineId Id="7963" Count="0" />
      <LineId Id="7969" Count="0" />
      <LineId Id="3301" Count="0" />
      <LineId Id="7962" Count="0" />
      <LineId Id="8768" Count="1" />
      <LineId Id="9117" Count="0" />
      <LineId Id="9119" Count="2" />
      <LineId Id="9296" Count="5" />
      <LineId Id="8944" Count="0" />
      <LineId Id="7979" Count="0" />
      <LineId Id="8743" Count="0" />
      <LineId Id="8745" Count="0" />
      <LineId Id="8747" Count="0" />
      <LineId Id="8744" Count="0" />
      <LineId Id="7964" Count="0" />
      <LineId Id="3302" Count="1" />
      <LineId Id="7978" Count="0" />
      <LineId Id="8423" Count="0" />
      <LineId Id="3520" Count="0" />
      <LineId Id="2011" Count="0" />
      <LineId Id="3521" Count="4" />
      <LineId Id="3528" Count="1" />
      <LineId Id="6201" Count="0" />
      <LineId Id="4075" Count="0" />
      <LineId Id="9132" Count="0" />
      <LineId Id="6608" Count="0" />
      <LineId Id="9461" Count="0" />
      <LineId Id="6609" Count="0" />
      <LineId Id="6611" Count="1" />
      <LineId Id="6606" Count="1" />
      <LineId Id="7305" Count="0" />
      <LineId Id="7291" Count="1" />
      <LineId Id="7296" Count="0" />
      <LineId Id="7294" Count="0" />
      <LineId Id="7304" Count="0" />
      <LineId Id="7298" Count="0" />
      <LineId Id="7293" Count="0" />
      <LineId Id="7285" Count="0" />
      <LineId Id="7306" Count="0" />
      <LineId Id="7299" Count="0" />
      <LineId Id="7307" Count="1" />
      <LineId Id="7302" Count="0" />
      <LineId Id="7287" Count="0" />
      <LineId Id="7286" Count="0" />
      <LineId Id="7289" Count="0" />
      <LineId Id="7309" Count="0" />
      <LineId Id="7311" Count="2" />
      <LineId Id="7284" Count="0" />
      <LineId Id="3591" Count="0" />
      <LineId Id="3784" Count="0" />
      <LineId Id="1499" Count="0" />
      <LineId Id="8133" Count="1" />
      <LineId Id="8568" Count="6" />
      <LineId Id="8563" Count="1" />
      <LineId Id="8566" Count="1" />
      <LineId Id="9651" Count="2" />
      <LineId Id="1513" Count="0" />
      <LineId Id="1526" Count="0" />
      <LineId Id="4276" Count="0" />
      <LineId Id="6379" Count="0" />
      <LineId Id="8946" Count="2" />
      <LineId Id="8579" Count="0" />
      <LineId Id="8581" Count="1" />
      <LineId Id="8950" Count="1" />
      <LineId Id="8949" Count="0" />
      <LineId Id="6374" Count="1" />
      <LineId Id="6380" Count="0" />
      <LineId Id="8953" Count="1" />
      <LineId Id="8952" Count="0" />
      <LineId Id="8575" Count="1" />
      <LineId Id="8578" Count="0" />
      <LineId Id="8956" Count="1" />
      <LineId Id="8955" Count="0" />
      <LineId Id="1511" Count="0" />
      <LineId Id="1519" Count="0" />
      <LineId Id="4290" Count="1" />
      <LineId Id="8415" Count="0" />
      <LineId Id="9133" Count="2" />
      <LineId Id="1509" Count="0" />
      <LineId Id="4299" Count="0" />
      <LineId Id="8136" Count="1" />
      <LineId Id="9462" Count="0" />
      <LineId Id="9481" Count="0" />
      <LineId Id="8427" Count="1" />
      <LineId Id="9463" Count="0" />
      <LineId Id="9482" Count="0" />
      <LineId Id="3533" Count="0" />
      <LineId Id="7783" Count="0" />
      <LineId Id="9464" Count="0" />
      <LineId Id="9484" Count="0" />
      <LineId Id="3541" Count="0" />
      <LineId Id="4239" Count="0" />
      <LineId Id="9465" Count="0" />
      <LineId Id="9485" Count="0" />
      <LineId Id="3928" Count="0" />
      <LineId Id="6383" Count="0" />
      <LineId Id="9466" Count="0" />
      <LineId Id="9486" Count="0" />
      <LineId Id="6384" Count="0" />
      <LineId Id="7476" Count="0" />
      <LineId Id="9467" Count="0" />
      <LineId Id="9487" Count="0" />
      <LineId Id="8425" Count="1" />
      <LineId Id="9469" Count="0" />
      <LineId Id="9488" Count="0" />
      <LineId Id="9470" Count="2" />
      <LineId Id="9480" Count="0" />
      <LineId Id="3535" Count="0" />
      <LineId Id="3540" Count="0" />
      <LineId Id="3539" Count="0" />
      <LineId Id="7626" Count="0" />
      <LineId Id="7628" Count="0" />
      <LineId Id="8413" Count="0" />
      <LineId Id="7632" Count="0" />
      <LineId Id="4256" Count="0" />
      <LineId Id="7624" Count="1" />
      <LineId Id="7631" Count="0" />
      <LineId Id="4255" Count="0" />
      <LineId Id="7621" Count="1" />
      <LineId Id="7630" Count="0" />
      <LineId Id="7279" Count="3" />
      <LineId Id="4257" Count="0" />
      <LineId Id="7629" Count="0" />
      <LineId Id="7948" Count="0" />
      <LineId Id="7950" Count="1" />
      <LineId Id="7949" Count="0" />
      <LineId Id="6942" Count="0" />
      <LineId Id="8718" Count="0" />
      <LineId Id="8727" Count="0" />
      <LineId Id="8729" Count="1" />
      <LineId Id="7472" Count="0" />
      <LineId Id="8941" Count="1" />
      <LineId Id="9493" Count="0" />
      <LineId Id="9492" Count="0" />
      <LineId Id="9489" Count="1" />
      <LineId Id="8728" Count="0" />
      <LineId Id="9491" Count="0" />
      <LineId Id="7473" Count="2" />
      <LineId Id="7933" Count="0" />
      <LineId Id="7133" Count="0" />
      <LineId Id="7934" Count="0" />
      <LineId Id="7936" Count="1" />
      <LineId Id="7935" Count="0" />
      <LineId Id="4662" Count="0" />
      <LineId Id="8731" Count="0" />
      <LineId Id="8733" Count="1" />
      <LineId Id="8732" Count="0" />
      <LineId Id="4663" Count="2" />
      <LineId Id="4837" Count="1" />
      <LineId Id="9294" Count="1" />
      <LineId Id="4841" Count="0" />
      <LineId Id="8424" Count="0" />
      <LineId Id="4853" Count="0" />
      <LineId Id="4855" Count="0" />
      <LineId Id="4857" Count="0" />
      <LineId Id="8416" Count="0" />
      <LineId Id="8961" Count="0" />
      <LineId Id="9290" Count="3" />
      <LineId Id="8962" Count="0" />
      <LineId Id="8934" Count="6" />
      <LineId Id="4656" Count="0" />
      <LineId Id="7090" Count="0" />
      <LineId Id="7093" Count="4" />
      <LineId Id="7091" Count="0" />
      <LineId Id="8119" Count="6" />
      <LineId Id="8723" Count="0" />
      <LineId Id="7098" Count="3" />
      <LineId Id="7103" Count="4" />
      <LineId Id="8126" Count="6" />
      <LineId Id="8724" Count="0" />
      <LineId Id="7132" Count="0" />
      <LineId Id="7092" Count="0" />
      <LineId Id="3530" Count="1" />
      <LineId Id="3583" Count="2" />
      <LineId Id="6778" Count="0" />
      <LineId Id="5530" Count="0" />
      <LineId Id="3085" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="1179" Count="0" />
      <LineId Id="933" Count="3" />
      <LineId Id="1180" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="1183" Count="0" />
      <LineId Id="939" Count="1" />
      <LineId Id="1181" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="1184" Count="0" />
      <LineId Id="943" Count="1" />
      <LineId Id="1182" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="1185" Count="0" />
      <LineId Id="947" Count="2" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1491" Count="4" />
      <LineId Id="6773" Count="2" />
      <LineId Id="3293" Count="0" />
      <LineId Id="9475" Count="2" />
      <LineId Id="9474" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.gototelescope">
      <LineId Id="96" Count="0" />
      <LineId Id="140" Count="2" />
      <LineId Id="144" Count="2" />
      <LineId Id="206" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="200" Count="4" />
      <LineId Id="207" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="46" Count="8" />
      <LineId Id="107" Count="1" />
      <LineId Id="110" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="74" Count="1" />
      <LineId Id="78" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="157" Count="2" />
      <LineId Id="161" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="128" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.hometelescope">
      <LineId Id="42" Count="3" />
      <LineId Id="47" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.parktelescope">
      <LineId Id="115" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="252" Count="2" />
      <LineId Id="166" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="229" Count="1" />
      <LineId Id="228" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="226" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="140" Count="2" />
      <LineId Id="191" Count="3" />
      <LineId Id="190" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="204" Count="7" />
      <LineId Id="203" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="202" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="268" Count="2" />
      <LineId Id="267" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="195" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="264" Count="2" />
      <LineId Id="156" Count="1" />
      <LineId Id="271" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="169" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.poweron">
      <LineId Id="99" Count="11" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="2" />
      <LineId Id="111" Count="2" />
      <LineId Id="117" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="130" Count="8" />
      <LineId Id="140" Count="2" />
      <LineId Id="144" Count="4" />
      <LineId Id="150" Count="3" />
      <LineId Id="188" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="167" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="168" Count="3" />
      <LineId Id="196" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="172" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.slewtelescope">
      <LineId Id="60" Count="0" />
      <LineId Id="99" Count="6" />
      <LineId Id="61" Count="4" />
      <LineId Id="117" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="66" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="14" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="77" Count="3" />
      <LineId Id="88" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="76" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.stoptelescope">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="12" Count="1" />
    </LineIds>
    <LineIds Name="TelescopeControl.tracktelescope">
      <LineId Id="80" Count="0" />
      <LineId Id="100" Count="12" />
      <LineId Id="94" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="57" Count="1" />
      <LineId Id="116" Count="1" />
      <LineId Id="119" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="3" />
      <LineId Id="121" Count="1" />
      <LineId Id="124" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="72" Count="3" />
      <LineId Id="77" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="126" Count="1" />
      <LineId Id="129" Count="2" />
      <LineId Id="88" Count="5" />
      <LineId Id="26" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>